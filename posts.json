[
    {
        "title": "Post One: Light/Dark Mode Switcher",
        "description": "Welcome to my first blog post! In here, I will explain the steps I took to implement a dark mode switcher in my website!<br><br>To start, I first added the button itself to the navigation bar that is present on top of all of the pages. This button is similar to the others, however it does not refer to a webpage. Instead, it is simply assigned an ID. This ID is used to refer to the button itself in the JavaScript file responsible for switching the theme of the page.<br><br>In the JavaScript file, named DarkMode.js, I created two variables: current_mode, and dark_mode_button. The first variable, current_mode, refers to the currently used theme by obtaining a file containing that information from the local storage. The second variable, dark_mode_button, is a constant that refers to the dark mode button present on each webpage. After this, I created two functions: enableDarkMode() and disableDarkMode(). These functions are relatively simple, each performing three tasks. They either add or remove the dark_mode class from the body tag of the webpage; they set the current_mode variable (which is stored in the local storage) to active or null; and they change the text of the button to either 'Light Mode' or 'Dark Mode'. Following those two functions, I have an if statement that checks whether or not the current_mode variable is already set to 'active'. This is to make sure that, if the user has already activated dark mode on a previous visit, the webpage loads in dark mode by default.<br><br>Finally, there is the event listener, which listens for a click event. Upon the button being clicked, this event listener executes an arrow function that does two things. First, it sets the current_mode variable to the value of current_mode located in the local storage. Second, it runs an if statement that checks to see if current_mode is set to active. If it is not, the enableDarkMode() function is executed. If it is, the disableDarkMode() function is executed.<br><br>That is my complete process of adding a dark mode functionality to my website. I hope it was clear, and thank you for reading!"
    },

    {
        "title": "Post Two: Dynamic Blog Section",
        "description": "Welcome back! In this blog post, I will be going through my process for creating the entire dynamic blog section you are viewing right now.<br><br>To start, I created this webpage, which is called blog.html, alongside two other files: posts.json, and scripts.js. The purpose of blog.html is obvious; it is the webpage that displays the entire blog. The purpose of the JSON file is to store the contents of the blog, and the purpose of the JavaScript file is to fetch and display these blog posts on this very webpage.<br><br>The content of the JSON file is very simple; all it contains is an array that stores each blog post in two variables: the title, and the description. For example, the title of this post is 'Post Two: Dynamic Blog Section', and the description is all the text you are reading right now.<br><br>When it comes to the JavaScript file, the code is a little more complicated. However, since most of the code itself was written and given to us by our professor (which we all appreciate very much :D), the part that I had to fill in myself was very little. Basically, the entire script code is located within an event listener, and the first thing that the function does is create a constant variable named blogList. This variable is used to refer to blog-list element placed in the blog.html page. After this, the posts.json file is fetched, and for every single post, a div element is created and stored in a constant variable called postElement. These divs act as containers for each blog post and are assigned a few properties. Their class is set to the blog_posts class, and their innerHTML contains both a title and description, fetched from the posts.json file. Once all of this is done, the function appends this postElement div to the blogList element created earlier. Finally, there is a catch statement at the end of the function just in case there are any problems with loading the blog posts.<br><br>Returning back to the blog.html page, I added three styles and one ID to the document's style section. The ID is assigned to a div object and is used to display the blog posts on the page, while the three classes are there to style these blog post containers, titles, and descriptions respectively.<br><br>With that, my blog section is complete! I hope you understood how I went about creating it. Thank you for reading!"
    }
]